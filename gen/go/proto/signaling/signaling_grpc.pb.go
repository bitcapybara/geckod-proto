// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/signaling/signaling.proto

package signaling

import (
	context "context"
	command "github.com/bitcapybara/geckod-proto/gen/go/proto/command"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignalingClient is the client API for Signaling service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignalingClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Signaling(ctx context.Context, opts ...grpc.CallOption) (Signaling_SignalingClient, error)
}

type signalingClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalingClient(cc grpc.ClientConnInterface) SignalingClient {
	return &signalingClient{cc}
}

func (c *signalingClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/signaling.Signaling/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalingClient) Signaling(ctx context.Context, opts ...grpc.CallOption) (Signaling_SignalingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Signaling_ServiceDesc.Streams[0], "/signaling.Signaling/Signaling", opts...)
	if err != nil {
		return nil, err
	}
	x := &signalingSignalingClient{stream}
	return x, nil
}

type Signaling_SignalingClient interface {
	Send(*command.BaseCommand) error
	Recv() (*command.BaseCommand, error)
	grpc.ClientStream
}

type signalingSignalingClient struct {
	grpc.ClientStream
}

func (x *signalingSignalingClient) Send(m *command.BaseCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signalingSignalingClient) Recv() (*command.BaseCommand, error) {
	m := new(command.BaseCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignalingServer is the server API for Signaling service.
// All implementations must embed UnimplementedSignalingServer
// for forward compatibility
type SignalingServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	Signaling(Signaling_SignalingServer) error
	mustEmbedUnimplementedSignalingServer()
}

// UnimplementedSignalingServer must be embedded to have forward compatible implementations.
type UnimplementedSignalingServer struct {
}

func (UnimplementedSignalingServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSignalingServer) Signaling(Signaling_SignalingServer) error {
	return status.Errorf(codes.Unimplemented, "method Signaling not implemented")
}
func (UnimplementedSignalingServer) mustEmbedUnimplementedSignalingServer() {}

// UnsafeSignalingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalingServer will
// result in compilation errors.
type UnsafeSignalingServer interface {
	mustEmbedUnimplementedSignalingServer()
}

func RegisterSignalingServer(s grpc.ServiceRegistrar, srv SignalingServer) {
	s.RegisterService(&Signaling_ServiceDesc, srv)
}

func _Signaling_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signaling.Signaling/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signaling_Signaling_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalingServer).Signaling(&signalingSignalingServer{stream})
}

type Signaling_SignalingServer interface {
	Send(*command.BaseCommand) error
	Recv() (*command.BaseCommand, error)
	grpc.ServerStream
}

type signalingSignalingServer struct {
	grpc.ServerStream
}

func (x *signalingSignalingServer) Send(m *command.BaseCommand) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signalingSignalingServer) Recv() (*command.BaseCommand, error) {
	m := new(command.BaseCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Signaling_ServiceDesc is the grpc.ServiceDesc for Signaling service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signaling_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signaling.Signaling",
	HandlerType: (*SignalingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Signaling_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Signaling",
			Handler:       _Signaling_Signaling_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/signaling/signaling.proto",
}
